> Pre of `SafeMath.safeAdd(uint256,uint256)` is [33mTrue[0m
[]
> Query: 0
> Duration: 3513
---> DONE <---
> Post of `SafeMath.safeAdd(uint256,uint256)` is [33mFalse[0m
[['SafeMath.safeAdd(uint256,uint256)', 'SafeMath.safeSub(uint256,uint256)', 'BNB.unfreeze(uint256)', 'BNB.freeze(uint256)', 'BNB.burn(uint256)', 'BNB.transferFrom(address,address,uint256)', 'BNB.transfer(address,uint256)']]
> Post of `SafeMath.safeAdd(uint256,uint256)` is [33mAnd(0 <= b, 0 <= a, r == a + b)[0m
> Query: 1
> Duration: 6026
---> DONE <---
> Pre of `BNB.withdrawEther(uint256)` is [33mTrue[0m
[]
> Query: 0
> Duration: 6638
---> DONE <---
> Post of `BNB.withdrawEther(uint256)` is [33mFalse[0m
[['BNB.withdrawEther(uint256)']]
> Post of `BNB.withdrawEther(uint256)` is [33mAnd(msg.sender == owner, 0 <= amount)[0m
> Query: 1
> Duration: 7311
---> DONE <---
> Pre of `BNB.burn(uint256)` is [33mTrue[0m
[['SafeMath.safeAdd(uint256,uint256)', 'SafeMath.safeSub(uint256,uint256)', 'BNB.unfreeze(uint256)', 'BNB.freeze(uint256)', 'BNB.burn(uint256)', 'BNB.transferFrom(address,address,uint256)', 'BNB.transfer(address,uint256)']]
> Pre of `BNB.burn(uint256)` is [33mtotalSupply >= _value[0m
> Query: 1
> Duration: 21158
---> DONE <---
> Post of `BNB.burn(uint256)` is [33mFalse[0m
[['SafeMath.safeAdd(uint256,uint256)', 'SafeMath.safeSub(uint256,uint256)', 'BNB.unfreeze(uint256)', 'BNB.freeze(uint256)', 'BNB.burn(uint256)', 'BNB.transferFrom(address,address,uint256)', 'BNB.transfer(address,uint256)']]
> Post of `BNB.burn(uint256)` is [33mAnd(success,
    Not(0 >= _value),
    _value <= old_balanceOf[msg.sender],
    0 <= old_totalSupply,
    old_totalSupply >= _value,
    balanceOf[msg.sender] ==
    old_balanceOf[msg.sender] + -1*_value,
    totalSupply == old_totalSupply + -1*_value)[0m
> Query: 1
> Duration: 34855
---> DONE <---
> Pre of `SafeMath.safeSub(uint256,uint256)` is [33mTrue[0m
[['SafeMath.safeAdd(uint256,uint256)', 'SafeMath.safeSub(uint256,uint256)', 'BNB.unfreeze(uint256)', 'BNB.freeze(uint256)', 'BNB.burn(uint256)', 'BNB.transferFrom(address,address,uint256)', 'BNB.transfer(address,uint256)']]
> Pre of `SafeMath.safeSub(uint256,uint256)` is [33mb <= a[0m
> Query: 1
> Duration: 36217
---> DONE <---
> Post of `SafeMath.safeSub(uint256,uint256)` is [33mFalse[0m
[['SafeMath.safeAdd(uint256,uint256)', 'SafeMath.safeSub(uint256,uint256)', 'BNB.unfreeze(uint256)', 'BNB.freeze(uint256)', 'BNB.burn(uint256)', 'BNB.transferFrom(address,address,uint256)', 'BNB.transfer(address,uint256)']]
> Post of `SafeMath.safeSub(uint256,uint256)` is [33mAnd(r == a + -1*b, 0 <= b, 0 <= a, a >= b)[0m
> Query: 1
> Duration: 38177
---> DONE <---
> Pre of `BNB.unfreeze(uint256)` is [33mTrue[0m
[]
> Query: 0
> Duration: 38639
---> DONE <---
> Post of `BNB.unfreeze(uint256)` is [33mFalse[0m
[['SafeMath.safeAdd(uint256,uint256)', 'SafeMath.safeSub(uint256,uint256)', 'BNB.unfreeze(uint256)', 'BNB.freeze(uint256)', 'BNB.burn(uint256)', 'BNB.transferFrom(address,address,uint256)', 'BNB.transfer(address,uint256)']]
> Post of `BNB.unfreeze(uint256)` is [33mAnd(success,
    Not(0 >= _value),
    _value <= old_freezeOf[msg.sender],
    0 <= old_balanceOf[msg.sender],
    freezeOf[msg.sender] ==
    old_freezeOf[msg.sender] + -1*_value,
    balanceOf[msg.sender] ==
    old_balanceOf[msg.sender] + _value)[0m
> Query: 1
> Duration: 50074
---> DONE <---
> Pre of `BNB.transferFrom(address,address,uint256)` is [33mTrue[0m
[['SafeMath.safeAdd(uint256,uint256)', 'SafeMath.safeSub(uint256,uint256)', 'BNB.unfreeze(uint256)', 'BNB.freeze(uint256)', 'BNB.burn(uint256)', 'BNB.transferFrom(address,address,uint256)', 'BNB.transfer(address,uint256)']]
> Pre of `BNB.transferFrom(address,address,uint256)` is [33mNot(_from == _to)[0m
> Query: 1
> Duration: 69106
---> DONE <---
> Post of `BNB.transferFrom(address,address,uint256)` is [33mFalse[0m
[['SafeMath.safeAdd(uint256,uint256)', 'SafeMath.safeSub(uint256,uint256)', 'BNB.unfreeze(uint256)', 'BNB.freeze(uint256)', 'BNB.burn(uint256)', 'BNB.transferFrom(address,address,uint256)', 'BNB.transfer(address,uint256)']]
> Post of `BNB.transferFrom(address,address,uint256)` is [33mAnd(success,
    0 <= _value,
    _value <= old_balanceOf[_from],
    Not(0 >= _value),
    Not(0 == _to),
    _value <= old_allowance[_from][msg.sender],
    allowance[_from][msg.sender] ==
    old_allowance[_from][msg.sender] + -1*_value,
    Or(And(_from == _to,
           balanceOf[_to] == old_balanceOf[_from]),
       And(balanceOf[_from] ==
           old_balanceOf[_from] + -1*_value,
           balanceOf[_to] == old_balanceOf[_to] + _value,
           Not(_from == _to))),
    0 <= old_balanceOf[_to],
    Not(_from == _to))[0m
> Query: 1
> Duration: 89279
---> DONE <---
> Pre of `SafeMath.safeDiv(uint256,uint256)` is [33mTrue[0m
[['SafeMath.safeDiv(uint256,uint256)']]
> Pre of `SafeMath.safeDiv(uint256,uint256)` is [33mAnd(Not(b <= 0), a == b*(a/b) + a%b)[0m
> Query: 1
> Duration: 90039
---> DONE <---
> Post of `SafeMath.safeDiv(uint256,uint256)` is [33mFalse[0m
[['SafeMath.safeDiv(uint256,uint256)']]
> Post of `SafeMath.safeDiv(uint256,uint256)` is [33mAnd(0 <= a, r == a/b, Not(b <= 0))[0m
> Query: 1
> Duration: 90901
---> DONE <---
> Pre of `BNB.approve(address,uint256)` is [33mTrue[0m
[]
> Query: 0
> Duration: 91459
---> DONE <---
> Post of `BNB.approve(address,uint256)` is [33mFalse[0m
[['BNB.approve(address,uint256)']]
> Post of `BNB.approve(address,uint256)` is [33mAnd(success,
    allowance[msg.sender][_spender] == _value,
    Not(0 >= _value))[0m
> Query: 1
> Duration: 92108
---> DONE <---
> Pre of `SafeMath.safeMul(uint256,uint256)` is [33mTrue[0m
[]
> Query: 0
> Duration: 92589
---> DONE <---
> Post of `SafeMath.safeMul(uint256,uint256)` is [33mFalse[0m
[['SafeMath.safeMul(uint256,uint256)']]
> Post of `SafeMath.safeMul(uint256,uint256)` is [33mAnd(0 <= b, 0 <= a, r == a*b)[0m
> Query: 1
> Duration: 93177
---> DONE <---
> Pre of `BNB.BNB(uint256,string,uint8,string)` is [33mTrue[0m
[]
> Query: 0
> Duration: 93657
---> DONE <---
> Post of `BNB.BNB(uint256,string,uint8,string)` is [33mFalse[0m
[['BNB.BNB(uint256,string,uint8,string)']]
> Post of `BNB.BNB(uint256,string,uint8,string)` is [33mAnd(owner == msg.sender,
    decimals == decimalUnits,
    totalSupply == initialSupply,
    balanceOf[msg.sender] == initialSupply,
    0 <= decimalUnits,
    0 <= initialSupply,
    symbol == tokenSymbol,
    name == tokenName)[0m
> Query: 1
> Duration: 96351
---> DONE <---
> Pre of `BNB.freeze(uint256)` is [33mTrue[0m
[]
> Query: 0
> Duration: 96909
---> DONE <---
> Post of `BNB.freeze(uint256)` is [33mFalse[0m
[['SafeMath.safeAdd(uint256,uint256)', 'SafeMath.safeSub(uint256,uint256)', 'BNB.unfreeze(uint256)', 'BNB.freeze(uint256)', 'BNB.burn(uint256)', 'BNB.transferFrom(address,address,uint256)', 'BNB.transfer(address,uint256)']]
> Post of `BNB.freeze(uint256)` is [33mAnd(success,
    Not(0 >= _value),
    _value <= old_balanceOf[msg.sender],
    0 <= old_freezeOf[msg.sender],
    balanceOf[msg.sender] ==
    old_balanceOf[msg.sender] + -1*_value,
    freezeOf[msg.sender] ==
    old_freezeOf[msg.sender] + _value)[0m
> Query: 1
> Duration: 110267
---> DONE <---
> Pre of `BNB.transfer(address,uint256)` is [33mTrue[0m
[['SafeMath.safeAdd(uint256,uint256)', 'SafeMath.safeSub(uint256,uint256)', 'BNB.unfreeze(uint256)', 'BNB.freeze(uint256)', 'BNB.burn(uint256)', 'BNB.transferFrom(address,address,uint256)', 'BNB.transfer(address,uint256)']]
> Pre of `BNB.transfer(address,uint256)` is [33mNot(msg.sender == _to)[0m
> Query: 1
> Duration: 123158
---> DONE <---
> Post of `BNB.transfer(address,uint256)` is [33mFalse[0m
[['SafeMath.safeAdd(uint256,uint256)', 'SafeMath.safeSub(uint256,uint256)', 'BNB.unfreeze(uint256)', 'BNB.freeze(uint256)', 'BNB.burn(uint256)', 'BNB.transferFrom(address,address,uint256)', 'BNB.transfer(address,uint256)']]
> Post of `BNB.transfer(address,uint256)` is [33mAnd(_value <= old_balanceOf[msg.sender],
    Not(0 >= _value),
    Not(0 == _to),
    Or(And(balanceOf[_to] == old_balanceOf[msg.sender],
           msg.sender == _to),
       And(balanceOf[msg.sender] ==
           old_balanceOf[msg.sender] + -1*_value,
           Not(msg.sender == _to),
           balanceOf[_to] == old_balanceOf[_to] + _value)),
    0 <= old_balanceOf[_to],
    Not(msg.sender == _to))[0m
> Query: 1
> Duration: 136222
---> DONE <---
